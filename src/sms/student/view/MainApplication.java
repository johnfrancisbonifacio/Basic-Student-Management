/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sms.student.view;

import java.sql.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.proteanit.sql.DbUtils;
import sms.student.controller.*;
import sms.student.database.*;
import sms.student.model.*;
import sms.student.model.StudentData;
import sms.student.resources.*;

/**
 *
 * @author Bilog
 */
public class MainApplication extends javax.swing.JFrame {

    private static final DecimalFormat df = new DecimalFormat("0.00");
    private int editId;

    PreparedStatement pst;
    ResultSet rs;

    EmailValidation emailValid;
    TextPrompt tpSearchStudent,
            tpTxtActivity, tpTxtActivityEdit,
            tpTxtContact,
            tpTxtContactEdit,
            tpTxtEmail,
            tpTxtEmailEdit,
            tpTxtFirstname,
            tpTxtFirstnameEdit,
            tpTxtGroup,
            tpTxtGroupEdit,
            tpTxtIndividual,
            tpTxtIndividualEdit,
            tpTxtLastname,
            tpTxtLastnameEdit,
            tpTxtMiddlename,
            tpTxtMiddlenameEdit,
            tpTxtPasswordNew,
            tpTxtPasswordOld;

    /**
     * Creates new form MainApplication
     */
    public MainApplication() {
        initComponents();
        defaultUiLoad();
        loadStudent();
        loadStudentReport();
        init();
    }

    public void defaultUiLoad() {
        UI.removeAll();
        UI.add(HomeUI);
        UI.repaint();
        UI.revalidate();
    }

    public void init() {
        tpSearchStudent = new TextPrompt("Search student", searchStudent);
        tpTxtActivity = new TextPrompt("Activity Score", txtActivity);
        tpTxtContact = new TextPrompt("Contact No.", txtContact);
        tpTxtEmail = new TextPrompt("Email", txtEmail);
        tpTxtFirstname = new TextPrompt("Firstname", txtFirstname);
        tpTxtGroup = new TextPrompt("Group Score", txtGroup);
        tpTxtIndividual = new TextPrompt("Individual Score", txtIndividual);
        tpTxtLastname = new TextPrompt("Lastname", txtLastname);
        tpTxtMiddlename = new TextPrompt("Middlename", txtMiddlename);

        tpTxtActivityEdit = new TextPrompt("Activity Score", txtActivityEdit);
        tpTxtContactEdit = new TextPrompt("Contact No.", txtContactEdit);
        tpTxtEmailEdit = new TextPrompt("Email", txtEmailEdit);
        tpTxtFirstnameEdit = new TextPrompt("Firstname", txtFirstnameEdit);
        tpTxtGroupEdit = new TextPrompt("Group Score", txtGroupEdit);
        tpTxtIndividualEdit = new TextPrompt("Individual Score", txtIndividualEdit);
        tpTxtLastnameEdit = new TextPrompt("Lastname", txtLastnameEdit);
        tpTxtMiddlenameEdit = new TextPrompt("Middlename", txtMiddlenameEdit);

        tpTxtPasswordNew = new TextPrompt("Enter new password", txtPasswordNew);
        tpTxtPasswordOld = new TextPrompt("Enter old password to confirm", txtPasswordOld);

        tpTxtPasswordNew.setForeground(Color.gray);
        tpTxtPasswordOld.setForeground(Color.gray);

        tpSearchStudent.setForeground(Color.gray);
        tpTxtActivity.setForeground(Color.gray);
        tpTxtContact.setForeground(Color.gray);
        tpTxtEmail.setForeground(Color.gray);
        tpTxtFirstname.setForeground(Color.gray);
        tpTxtGroup.setForeground(Color.gray);
        tpTxtIndividual.setForeground(Color.gray);
        tpTxtLastname.setForeground(Color.gray);
        tpTxtMiddlename.setForeground(Color.gray);

        tpTxtActivityEdit.setForeground(Color.gray);
        tpTxtContactEdit.setForeground(Color.gray);
        tpTxtEmailEdit.setForeground(Color.gray);
        tpTxtFirstnameEdit.setForeground(Color.gray);
        tpTxtGroupEdit.setForeground(Color.gray);
        tpTxtIndividualEdit.setForeground(Color.gray);
        tpTxtLastnameEdit.setForeground(Color.gray);
        tpTxtMiddlenameEdit.setForeground(Color.gray);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pop = new javax.swing.JPopupMenu();
        view = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenuItem();
        refresh = new javax.swing.JMenuItem();
        PanelFrame = new javax.swing.JPanel();
        contentPane = new javax.swing.JPanel();
        UI = new javax.swing.JPanel();
        ReportUI = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DefaultTableCellRenderer centerTexts = new DefaultTableCellRenderer();
        centerTexts.setHorizontalAlignment(JLabel.CENTER);
        report_table = new javax.swing.JTable();
        cbScheduleReport = new javax.swing.JComboBox<>();
        printReport = new javax.swing.JLabel();
        HomeUI = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addStudentLabel = new javax.swing.JLabel();
        searchStudent = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        DefaultTableCellRenderer centerText = new DefaultTableCellRenderer();
        centerText.setHorizontalAlignment(JLabel.CENTER);
        student_table = new javax.swing.JTable();
        SettingUI = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        addStudentLabel1 = new javax.swing.JLabel();
        txtPasswordNew = new javax.swing.JPasswordField();
        txtPasswordOld = new javax.swing.JPasswordField();
        AddUI = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtLastname = new javax.swing.JTextField();
        txtFirstname = new javax.swing.JTextField();
        txtMiddlename = new javax.swing.JTextField();
        txtBirthdayChooser = new com.toedter.calendar.JDateChooser();
        cbGender = new javax.swing.JComboBox<>();
        cbNationality = new javax.swing.JComboBox<>();
        cbCivil = new javax.swing.JComboBox<>();
        cbLocation = new javax.swing.JComboBox<>();
        txtContact = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        cbSchedule = new javax.swing.JComboBox<>();
        cbAttendance = new javax.swing.JComboBox<>();
        txtIndividual = new javax.swing.JTextField();
        txtActivity = new javax.swing.JTextField();
        txtGroup = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        ViewUI = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txtFullnameView = new javax.swing.JLabel();
        txtBirthdayView = new javax.swing.JLabel();
        txtGenderView = new javax.swing.JLabel();
        txtNationalityView = new javax.swing.JLabel();
        txtCivilView = new javax.swing.JLabel();
        txtAddressView = new javax.swing.JLabel();
        txtContactView = new javax.swing.JLabel();
        txtEmailView = new javax.swing.JLabel();
        txtScheduleView = new javax.swing.JLabel();
        txtActivityView = new javax.swing.JLabel();
        txtIndividualView = new javax.swing.JLabel();
        txtGroupView = new javax.swing.JLabel();
        txtAttendanceView = new javax.swing.JLabel();
        EditUI = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        txtLastnameEdit = new javax.swing.JTextField();
        txtFirstnameEdit = new javax.swing.JTextField();
        txtMiddlenameEdit = new javax.swing.JTextField();
        txtBirthdayChooserEdit = new com.toedter.calendar.JDateChooser();
        cbGenderEdit = new javax.swing.JComboBox<>();
        cbNationalityEdit = new javax.swing.JComboBox<>();
        cbCivilEdit = new javax.swing.JComboBox<>();
        cbLocationEdit = new javax.swing.JComboBox<>();
        txtContactEdit = new javax.swing.JTextField();
        txtEmailEdit = new javax.swing.JTextField();
        cbScheduleEdit = new javax.swing.JComboBox<>();
        cbAttendanceEdit = new javax.swing.JComboBox<>();
        txtIndividualEdit = new javax.swing.JTextField();
        txtActivityEdit = new javax.swing.JTextField();
        txtGroupEdit = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        SettingLabel = new javax.swing.JLabel();
        ReportLabel = new javax.swing.JLabel();
        HomeLabel = new javax.swing.JLabel();
        TopPanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JLabel();

        view.setText("view");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        pop.add(view);

        edit.setText("edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        pop.add(edit);

        refresh.setText("refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        pop.add(refresh);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 500));
        setUndecorated(true);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        PanelFrame.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true));
        PanelFrame.setForeground(new java.awt.Color(204, 204, 204));
        PanelFrame.setMaximumSize(new java.awt.Dimension(900, 600));
        PanelFrame.setMinimumSize(new java.awt.Dimension(900, 600));
        PanelFrame.setPreferredSize(new java.awt.Dimension(900, 600));
        PanelFrame.setLayout(new java.awt.GridLayout(1, 0));

        contentPane.setBackground(new java.awt.Color(204, 204, 255));
        contentPane.setMaximumSize(new java.awt.Dimension(900, 600));
        contentPane.setMinimumSize(new java.awt.Dimension(900, 600));
        contentPane.setPreferredSize(new java.awt.Dimension(900, 600));
        contentPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        UI.setBackground(new java.awt.Color(204, 204, 255));
        UI.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 0, 0, new java.awt.Color(204, 204, 204)));
        UI.setMaximumSize(new java.awt.Dimension(749, 600));
        UI.setMinimumSize(new java.awt.Dimension(749, 600));
        UI.setPreferredSize(new java.awt.Dimension(749, 600));
        UI.setLayout(new java.awt.CardLayout());

        ReportUI.setBackground(new java.awt.Color(255, 255, 255));
        ReportUI.setMaximumSize(new java.awt.Dimension(749, 600));
        ReportUI.setMinimumSize(new java.awt.Dimension(749, 600));
        ReportUI.setPreferredSize(new java.awt.Dimension(749, 600));
        ReportUI.setLayout(new java.awt.GridLayout(1, 0));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        report_table.setModel(new DefaultTableModel(
            new Object[][] {
            },
            //			new String[] {
                //				"ID", "NAME", "ADDRESS", "CONTACT", "EMAIL", "GENDER", "SCHEDULE"
                //			}
            new String[] {
                "ID", "NAME", "SCHEDULE", "ACTIVITY", "INDIVIDUAL", "GROUP", "REMARKS",
            }
        ){
            public boolean isCellEditable(int row, int col) {
                return false;
            }});
            report_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            report_table.getTableHeader().setResizingAllowed(false);
            report_table.getTableHeader().setReorderingAllowed(false);
            report_table.setAutoResizeMode(student_table.AUTO_RESIZE_NEXT_COLUMN);

            int[] columnsWidth = {
                10, 150, 50, 30, 30, 30, 50
            };

            int i = 0;
            for (int width : columnsWidth) {
                TableColumn column = report_table.getColumnModel().getColumn(i++);
                column.setCellRenderer(centerText);
                column.setPreferredWidth(width);
            }
            report_table.setDefaultEditor(Object.class, null);
            jScrollPane2.setViewportView(report_table);

            cbScheduleReport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Morning", "Afternoon" }));
            cbScheduleReport.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cbScheduleReportActionPerformed(evt);
                }
            });

            printReport.setBackground(new java.awt.Color(255, 102, 102));
            printReport.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
            printReport.setForeground(new java.awt.Color(255, 255, 255));
            printReport.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            printReport.setText("PRINT");
            printReport.setMaximumSize(new java.awt.Dimension(749, 600));
            printReport.setMinimumSize(new java.awt.Dimension(749, 600));
            printReport.setOpaque(true);
            printReport.setPreferredSize(new java.awt.Dimension(749, 600));
            printReport.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    printReportMousePressed(evt);
                }
            });

            javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
            jPanel6.setLayout(jPanel6Layout);
            jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(cbScheduleReport, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(printReport, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE))
                    .addContainerGap())
            );
            jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbScheduleReport, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(printReport, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(58, Short.MAX_VALUE))
            );

            ReportUI.add(jPanel6);

            UI.add(ReportUI, "card3");

            HomeUI.setBackground(new java.awt.Color(255, 255, 255));
            HomeUI.setMaximumSize(new java.awt.Dimension(749, 600));
            HomeUI.setMinimumSize(new java.awt.Dimension(749, 600));
            HomeUI.setPreferredSize(new java.awt.Dimension(749, 600));
            HomeUI.setLayout(new java.awt.GridLayout(1, 0));

            jPanel2.setBackground(new java.awt.Color(255, 255, 255));
            jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

            addStudentLabel.setBackground(new java.awt.Color(0, 204, 51));
            addStudentLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
            addStudentLabel.setForeground(new java.awt.Color(255, 255, 255));
            addStudentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            addStudentLabel.setText("Add");
            addStudentLabel.setMaximumSize(new java.awt.Dimension(749, 600));
            addStudentLabel.setMinimumSize(new java.awt.Dimension(749, 600));
            addStudentLabel.setOpaque(true);
            addStudentLabel.setPreferredSize(new java.awt.Dimension(749, 600));
            addStudentLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    addStudentLabelMousePressed(evt);
                }
            });

            searchStudent.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    searchStudentKeyReleased(evt);
                }
            });

            student_table.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent e) {
                    if(e.getButton() == MouseEvent.BUTTON3) {
                        int rowPointer = student_table.rowAtPoint(e.getPoint());
                        student_table.getSelectionModel().setSelectionInterval(rowPointer, rowPointer);
                        pop.show(student_table, e.getX(), e.getY());
                        int column = 0;
                        int row = student_table.getSelectedRow();
                        editId = Integer.parseInt(student_table.getModel().getValueAt(row, column).toString());
                    }
                }

            });
            student_table.setModel(new DefaultTableModel(
                new Object[][] {
                },
                //			new String[] {
                    //				"ID", "NAME", "ADDRESS", "CONTACT", "EMAIL", "GENDER", "SCHEDULE"
                    //			}
                new String[] {
                    "ID", "NAME", "SCHEDULE", "ACTIVITY", "INDIVIDUAL", "GROUP", "REMARKS",
                }
            ){
                public boolean isCellEditable(int row, int col) {
                    return false;
                }});
                student_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                student_table.getTableHeader().setResizingAllowed(false);
                student_table.getTableHeader().setReorderingAllowed(false);
                student_table.setAutoResizeMode(student_table.AUTO_RESIZE_NEXT_COLUMN);

                int[] columnsWidths = {
                    10, 150, 50, 30, 30, 30, 50
                };

                int is = 0;
                for (int width : columnsWidths) {
                    TableColumn column = student_table.getColumnModel().getColumn(is++);
                    column.setCellRenderer(centerText);
                    column.setPreferredWidth(width);
                }
                student_table.setDefaultEditor(Object.class, null);
                jScrollPane1.setViewportView(student_table);

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(addStudentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addStudentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(58, Short.MAX_VALUE))
                );

                HomeUI.add(jPanel2);

                UI.add(HomeUI, "card2");

                SettingUI.setBackground(new java.awt.Color(255, 255, 255));
                SettingUI.setMaximumSize(new java.awt.Dimension(749, 600));
                SettingUI.setMinimumSize(new java.awt.Dimension(749, 600));
                SettingUI.setPreferredSize(new java.awt.Dimension(749, 600));
                SettingUI.setLayout(new java.awt.GridLayout(1, 0));

                jPanel1.setBackground(new java.awt.Color(255, 255, 255));
                jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

                addStudentLabel1.setBackground(new java.awt.Color(0, 204, 51));
                addStudentLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
                addStudentLabel1.setForeground(new java.awt.Color(255, 255, 255));
                addStudentLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                addStudentLabel1.setText("Update");
                addStudentLabel1.setMaximumSize(new java.awt.Dimension(749, 600));
                addStudentLabel1.setMinimumSize(new java.awt.Dimension(749, 600));
                addStudentLabel1.setOpaque(true);
                addStudentLabel1.setPreferredSize(new java.awt.Dimension(749, 600));
                addStudentLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        addStudentLabel1MousePressed(evt);
                    }
                });

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(addStudentLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtPasswordNew)
                            .addComponent(txtPasswordOld))
                        .addContainerGap(570, Short.MAX_VALUE))
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(txtPasswordNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPasswordOld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addStudentLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(388, Short.MAX_VALUE))
                );

                SettingUI.add(jPanel1);

                UI.add(SettingUI, "card4");

                AddUI.setLayout(new java.awt.GridLayout(1, 0));

                jPanel3.setBackground(new java.awt.Color(255, 255, 255));
                jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

                txtBirthdayChooser.setDateFormatString("yyyy-MM-dd");

                cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gender", "Male", "Female" }));

                cbNationality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nationality", "Filipino", "Others" }));

                cbCivil.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Civil Status", "Single", "Married", "Others" }));

                cbLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location", "NCR", "Outside NCR" }));

                txtContact.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtContactKeyTyped(evt);
                    }
                });

                cbSchedule.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Schedule", "Morning", "Afternoon" }));

                cbAttendance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Attendance", "Complete", "Incomplete" }));

                txtIndividual.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtIndividualKeyTyped(evt);
                    }
                });

                txtActivity.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtActivityKeyTyped(evt);
                    }
                });

                txtGroup.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtGroupKeyTyped(evt);
                    }
                });

                jButton1.setText("Submit");
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1ActionPerformed(evt);
                    }
                });

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtIndividual)
                            .addComponent(cbSchedule, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtContact)
                            .addComponent(cbLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBirthdayChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastname, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFirstname)
                            .addComponent(cbGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmail)
                            .addComponent(cbAttendance, 0, 150, Short.MAX_VALUE)
                            .addComponent(txtActivity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMiddlename, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(cbNationality, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtGroup))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbCivil, 0, 150, Short.MAX_VALUE))
                        .addGap(114, 114, 114))
                );
                jPanel3Layout.setVerticalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMiddlename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBirthdayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbNationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbCivil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtActivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(354, 354, 354))
                );

                AddUI.add(jPanel3);

                UI.add(AddUI, "card5");

                ViewUI.setLayout(new java.awt.GridLayout(1, 0));

                jPanel4.setBackground(new java.awt.Color(255, 255, 255));
                jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

                txtFullnameView.setText("Fullname here");

                txtBirthdayView.setText("Birthday here");

                txtGenderView.setText("Gender here");

                txtNationalityView.setText("Nationality here");

                txtCivilView.setText("Civil here");

                txtAddressView.setText("Address here");

                txtContactView.setText("Contact here");

                txtEmailView.setText("Email here");

                txtScheduleView.setText("Schedule here");

                txtActivityView.setText("Activity here");

                txtIndividualView.setText("Individual here");

                txtGroupView.setText("Group here");

                txtAttendanceView.setText("Attendance here");

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtGroupView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIndividualView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtActivityView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFullnameView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBirthdayView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtGenderView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNationalityView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(txtCivilView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAddressView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtContactView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmailView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtScheduleView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtAttendanceView, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                        .addContainerGap(302, Short.MAX_VALUE))
                );
                jPanel4Layout.setVerticalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFullnameView)
                            .addComponent(txtAddressView))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBirthdayView)
                            .addComponent(txtContactView))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGenderView)
                            .addComponent(txtEmailView))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNationalityView)
                            .addComponent(txtScheduleView))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCivilView)
                        .addGap(51, 51, 51)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtActivityView)
                            .addComponent(txtAttendanceView))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIndividualView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGroupView)
                        .addContainerGap(293, Short.MAX_VALUE))
                );

                ViewUI.add(jPanel4);

                UI.add(ViewUI, "card6");

                EditUI.setLayout(new java.awt.GridLayout(1, 0));

                jPanel5.setBackground(new java.awt.Color(255, 255, 255));
                jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

                txtBirthdayChooser.setDateFormatString("yyyy-MM-dd");

                cbGenderEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gender", "Male", "Female" }));

                cbNationalityEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nationality", "Filipino", "Others" }));

                cbCivilEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Civil Status", "Single", "Married", "Others" }));

                cbLocationEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location", "NCR", "Outside NCR" }));

                txtContactEdit.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtContactEditKeyTyped(evt);
                    }
                });

                cbScheduleEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Schedule", "Morning", "Afternoon" }));

                cbAttendanceEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Attendance", "Complete", "Incomplete" }));

                txtIndividualEdit.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtIndividualEditKeyTyped(evt);
                    }
                });

                txtActivityEdit.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtActivityEditKeyTyped(evt);
                    }
                });

                txtGroupEdit.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyTyped(java.awt.event.KeyEvent evt) {
                        txtGroupEditKeyTyped(evt);
                    }
                });

                jButton2.setText("Update");
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton2ActionPerformed(evt);
                    }
                });

                javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
                jPanel5.setLayout(jPanel5Layout);
                jPanel5Layout.setHorizontalGroup(
                    jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtIndividualEdit)
                            .addComponent(cbScheduleEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtContactEdit)
                            .addComponent(cbLocationEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBirthdayChooserEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastnameEdit, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFirstnameEdit)
                            .addComponent(cbGenderEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmailEdit)
                            .addComponent(cbAttendanceEdit, 0, 150, Short.MAX_VALUE)
                            .addComponent(txtActivityEdit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMiddlenameEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(cbNationalityEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtGroupEdit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbCivilEdit, 0, 150, Short.MAX_VALUE))
                        .addGap(114, 114, 114))
                );
                jPanel5Layout.setVerticalGroup(
                    jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLastnameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFirstnameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMiddlenameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBirthdayChooserEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbGenderEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbNationalityEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbCivilEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLocationEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtContactEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmailEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbScheduleEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbAttendanceEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIndividualEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtActivityEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGroupEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(354, 354, 354))
                );

                EditUI.add(jPanel5);

                UI.add(EditUI, "card5");

                contentPane.add(UI, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 750, 560));

                SettingLabel.setBackground(new java.awt.Color(0, 153, 153));
                SettingLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
                SettingLabel.setForeground(new java.awt.Color(255, 255, 255));
                SettingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                SettingLabel.setText("Setting");
                SettingLabel.setOpaque(true);
                SettingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        SettingLabelMousePressed(evt);
                    }
                });
                contentPane.add(SettingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 262, 150, 50));

                ReportLabel.setBackground(new java.awt.Color(0, 153, 153));
                ReportLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
                ReportLabel.setForeground(new java.awt.Color(255, 255, 255));
                ReportLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                ReportLabel.setText("Report");
                ReportLabel.setOpaque(true);
                ReportLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        ReportLabelMousePressed(evt);
                    }
                });
                contentPane.add(ReportLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 150, 50));

                HomeLabel.setBackground(new java.awt.Color(102, 153, 255));
                HomeLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
                HomeLabel.setForeground(new java.awt.Color(255, 255, 255));
                HomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                HomeLabel.setText("Home");
                HomeLabel.setOpaque(true);
                HomeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        HomeLabelMousePressed(evt);
                    }
                });
                contentPane.add(HomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 158, 150, 50));

                TopPanel.setBackground(new java.awt.Color(0, 153, 153));
                TopPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));

                exitButton.setBackground(new java.awt.Color(255, 0, 0));
                exitButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
                exitButton.setForeground(new java.awt.Color(255, 255, 255));
                exitButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                exitButton.setText("X");
                exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                exitButton.setMaximumSize(new java.awt.Dimension(749, 600));
                exitButton.setMinimumSize(new java.awt.Dimension(749, 600));
                exitButton.setOpaque(true);
                exitButton.setPreferredSize(new java.awt.Dimension(749, 600));
                exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        exitButtonMousePressed(evt);
                    }
                });

                javax.swing.GroupLayout TopPanelLayout = new javax.swing.GroupLayout(TopPanel);
                TopPanel.setLayout(TopPanelLayout);
                TopPanelLayout.setHorizontalGroup(
                    TopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopPanelLayout.createSequentialGroup()
                        .addContainerGap(860, Short.MAX_VALUE)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                );
                TopPanelLayout.setVerticalGroup(
                    TopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TopPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(8, Short.MAX_VALUE))
                );

                contentPane.add(TopPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 40));

                PanelFrame.add(contentPane);

                getContentPane().add(PanelFrame);

                pack();
                setLocationRelativeTo(null);
            }// </editor-fold>//GEN-END:initComponents

    private void scheduleReportCombo() {
        if (cbScheduleReport.getSelectedItem().equals("All")) {
            loadStudentReport();
        } else if (cbScheduleReport.getSelectedItem().equals("Morning")) {
            try {
                Connection con = Database.getConnection();
                String sql = "SELECT id as ID, concat(lastname,', ',firstname, ' ',middlename) as NAME, schedule as SCHEDULE"
                        + ", activityScore as ACTIVITY, individualScore as INDIVIDUAL, groupScore as 'GROUP', ROUND(AVG(activityScore + individualScore + groupScore)/3, 2) as REMARKS from"
                        + " student_table where schedule = ? group by id";
                pst = con.prepareStatement(sql);
                pst.setString(1, "Morning");
                rs = pst.executeQuery();

                DefaultTableCellRenderer centerText = new DefaultTableCellRenderer();
                centerText.setHorizontalAlignment(JLabel.CENTER);
                report_table.setModel(DbUtils.resultSetToTableModel(rs));

                report_table.getTableHeader().setResizingAllowed(false);
                report_table.getTableHeader().setReorderingAllowed(false);
                report_table.setAutoResizeMode(report_table.AUTO_RESIZE_NEXT_COLUMN);

                int[] columnsWidth = {
                    10, 150, 50, 30, 30, 30, 50
                };

                int i = 0;
                for (int width : columnsWidth) {
                    TableColumn column = report_table.getColumnModel().getColumn(i++);
                    column.setCellRenderer(centerText);
                    column.setPreferredWidth(width);
                }
            } catch (SQLException e) {
                Prompt.showMessage("ERROR", "Error while fetching student report data. Contact your System Developer.");
            }
        } else if (cbScheduleReport.getSelectedItem().equals("Afternoon")) {
            try {
                Connection con = Database.getConnection();
                String sql = "SELECT id as ID, concat(lastname,', ',firstname, ' ',middlename) as NAME, schedule as SCHEDULE"
                        + ", activityScore as ACTIVITY, individualScore as INDIVIDUAL, groupScore as 'GROUP', ROUND(AVG(activityScore + individualScore + groupScore)/3, 2) as REMARKS from"
                        + " student_table where schedule = ? group by id";
                pst = con.prepareStatement(sql);
                pst.setString(1, "Afternoon");
                rs = pst.executeQuery();

                DefaultTableCellRenderer centerText = new DefaultTableCellRenderer();
                centerText.setHorizontalAlignment(JLabel.CENTER);
                report_table.setModel(DbUtils.resultSetToTableModel(rs));

                report_table.getTableHeader().setResizingAllowed(false);
                report_table.getTableHeader().setReorderingAllowed(false);
                report_table.setAutoResizeMode(report_table.AUTO_RESIZE_NEXT_COLUMN);

                int[] columnsWidth = {
                    10, 150, 50, 30, 30, 30, 50
                };

                int i = 0;
                for (int width : columnsWidth) {
                    TableColumn column = report_table.getColumnModel().getColumn(i++);
                    column.setCellRenderer(centerText);
                    column.setPreferredWidth(width);
                }
            } catch (SQLException e) {
                Prompt.showMessage("ERROR", "Error while fetching student report data. Contact your System Developer.");
            }
        }
    }


    private void addStudentLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStudentLabelMousePressed
        if (SwingUtilities.isLeftMouseButton(evt)) {
            UI.removeAll();
            UI.add(AddUI);
            UI.repaint();
            UI.revalidate();
        }
    }//GEN-LAST:event_addStudentLabelMousePressed

    private void ReportLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReportLabelMousePressed
        if (SwingUtilities.isLeftMouseButton(evt)) {
            ReportLabel.setBackground(new java.awt.Color(102, 153, 255));
            SettingLabel.setBackground(new java.awt.Color(0, 153, 153));
            HomeLabel.setBackground(new java.awt.Color(0, 153, 153));

            loadStudentReport();
            searchStudent.setText("");
            cbScheduleReport.setSelectedIndex(0);

            UI.removeAll();
            UI.add(ReportUI);
            UI.repaint();
            UI.revalidate();
        }
    }//GEN-LAST:event_ReportLabelMousePressed

    private void updateAccount() {

        AccountData account = new AccountData();

        String newPass = txtPasswordNew.getText();
        String oldPass = txtPasswordOld.getText();
        int accountId = AccountData.getAccountId();

        AccountData.setAccountId(accountId);
        AccountData.setAccountPassOld(oldPass);
        AccountData.setAccountPassNew(newPass);

        AccountQuery accountQuery = new AccountQuery();
        accountQuery.update(account);

        txtPasswordNew.setText("");
        txtPasswordOld.setText("");
    }

    private void SettingLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SettingLabelMousePressed
        if (SwingUtilities.isLeftMouseButton(evt)) {
            SettingLabel.setBackground(new java.awt.Color(102, 153, 255));
            HomeLabel.setBackground(new java.awt.Color(0, 153, 153));
            ReportLabel.setBackground(new java.awt.Color(0, 153, 153));

            UI.removeAll();
            UI.add(SettingUI);
            UI.repaint();
            UI.revalidate();
        }
    }//GEN-LAST:event_SettingLabelMousePressed

    private void HomeLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeLabelMousePressed
        if (SwingUtilities.isLeftMouseButton(evt)) {
            HomeLabel.setBackground(new java.awt.Color(102, 153, 255));
            SettingLabel.setBackground(new java.awt.Color(0, 153, 153));
            ReportLabel.setBackground(new java.awt.Color(0, 153, 153));

            loadStudent();
            searchStudent.setText("");

            UI.removeAll();
            UI.add(HomeUI);
            UI.repaint();
            UI.revalidate();
        }
    }//GEN-LAST:event_HomeLabelMousePressed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        loadStudent();
    }//GEN-LAST:event_refreshActionPerformed

    private void searchStudentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStudentKeyReleased
        searchStudent();
        if (searchStudent.getText().equals("")) {
            loadStudent();
        }
    }//GEN-LAST:event_searchStudentKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveStudent();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtContactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtContact.getText().length() >= 11) {
            evt.consume();
        }
    }//GEN-LAST:event_txtContactKeyTyped

    private void txtActivityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtActivityKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtActivity.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtActivityKeyTyped

    private void txtIndividualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIndividualKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtIndividual.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIndividualKeyTyped

    private void txtGroupKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGroupKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtGroup.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGroupKeyTyped

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        showView();
        UI.removeAll();
        UI.add(ViewUI);
        UI.repaint();
        UI.revalidate();
    }//GEN-LAST:event_viewActionPerformed

    private void txtContactEditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactEditKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtContactEdit.getText().length() >= 11) {
            evt.consume();
        }
    }//GEN-LAST:event_txtContactEditKeyTyped

    private void txtIndividualEditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIndividualEditKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtIndividualEdit.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIndividualEditKeyTyped

    private void txtActivityEditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtActivityEditKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtActivityEdit.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtActivityEditKeyTyped

    private void txtGroupEditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGroupEditKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtGroupEdit.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGroupEditKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        editStudent();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        showEdit();
        UI.removeAll();
        UI.add(EditUI);
        UI.repaint();
        UI.revalidate();
    }//GEN-LAST:event_editActionPerformed

    private void cbScheduleReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbScheduleReportActionPerformed
        scheduleReportCombo();
    }//GEN-LAST:event_cbScheduleReportActionPerformed

    private void printReportMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printReportMousePressed
        if (SwingUtilities.isLeftMouseButton(evt)) {
            generateReport();
        }
    }//GEN-LAST:event_printReportMousePressed

    private void addStudentLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStudentLabel1MousePressed
        updateAccount();
    }//GEN-LAST:event_addStudentLabel1MousePressed

    private void exitButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMousePressed
        if(SwingUtilities.isLeftMouseButton(evt)){
            System.exit(0);
        }
    }//GEN-LAST:event_exitButtonMousePressed

    private void showEdit() {
        try {
            Connection con = Database.getConnection();
            String sql = "select * from student_table where id = ?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, editId);
            rs = pst.executeQuery();
            if (rs.next()) {
                String date = rs.getString("birthday");
                Date dateEdit = new SimpleDateFormat("yyyy-MM-dd").parse(date);

                txtFirstnameEdit.setText(rs.getString("firstname"));
                txtMiddlenameEdit.setText(rs.getString("middlename"));
                txtLastnameEdit.setText(rs.getString("lastname"));
                txtBirthdayChooserEdit.setDate(dateEdit);
                cbGenderEdit.setSelectedItem(rs.getString("gender"));
                cbNationalityEdit.setSelectedItem(rs.getString("nationality"));
                cbCivilEdit.setSelectedItem(rs.getString("civil"));
                cbLocationEdit.setSelectedItem(rs.getString("address"));
                txtContactEdit.setText(rs.getString("contact"));
                txtEmailEdit.setText(rs.getString("email"));
                cbScheduleEdit.setSelectedItem(rs.getString("schedule"));
                txtActivityEdit.setText(rs.getString("activityScore"));
                txtIndividualEdit.setText(rs.getString("individualScore"));
                txtGroupEdit.setText(rs.getString("groupScore"));
                cbAttendanceEdit.setSelectedItem(rs.getString("attendance"));
            }

        } catch (Exception e) {
            Prompt.showMessage("ERROR", "Error occur in displaying edit student info. Contact your System Developer.");
        }
    }

    private void searchStudent() {
        try {
            Connection con = Database.getConnection();
            String sql = "SELECT id as ID, concat(lastname,', ',firstname, ' ',middlename) as NAME, schedule as SCHEDULE"
                    + ", activityScore as ACTIVITY, individualScore as INDIVIDUAL, groupScore as 'GROUP', ROUND(AVG(activityScore + individualScore + groupScore)/3, 2) as REMARKS from"
                    + " student_table where firstname LIKE ? OR"
                    + " lastname LIKE ? OR middlename LIKE ? group by id";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, "%" + searchStudent.getText().toString() + "%");
            pst.setString(2, "%" + searchStudent.getText().toString() + "%");
            pst.setString(3, "%" + searchStudent.getText().toString() + "%");
            ResultSet rs = pst.executeQuery();

            DefaultTableCellRenderer centerText = new DefaultTableCellRenderer();
            centerText.setHorizontalAlignment(JLabel.CENTER);
            student_table.setModel(DbUtils.resultSetToTableModel(rs));

            student_table.getTableHeader().setResizingAllowed(false);
            student_table.getTableHeader().setReorderingAllowed(false);
            student_table.setAutoResizeMode(student_table.AUTO_RESIZE_NEXT_COLUMN);

            int[] columnsWidth = {
                10, 150, 50, 30, 30, 30, 50
            };

            int i = 0;
            for (int width : columnsWidth) {
                TableColumn column = student_table.getColumnModel().getColumn(i++);
                column.setCellRenderer(centerText);
                column.setPreferredWidth(width);
            }
        } catch (Exception e) {
            Prompt.showMessage("ERROR", "Error while fetching search data. Contact your System Developer.");
        }
    }

    private void checkMail() {
        String emailCheck = txtEmail.getText();
        emailValid = new EmailValidation();
        emailValid.validateEmail(emailCheck);
    }

    private void checkMailEdit() {
        String emailCheck = txtEmailEdit.getText();
        emailValid = new EmailValidation();
        emailValid.validateEmailEdit(emailCheck);
    }

    private void editStudent() {
        checkMailEdit();
        if (cbGenderEdit.getSelectedItem().equals(null)
                || cbNationalityEdit.getSelectedItem().equals(null)
                || cbCivilEdit.getSelectedItem().equals(null)
                || cbLocationEdit.getSelectedItem().equals(null)
                || txtEmailEdit.getText().equals("")
                || cbScheduleEdit.getSelectedItem().equals(null)
                || cbAttendanceEdit.getSelectedItem().equals(null)
                || txtContactEdit.getText().equals("")
                || txtActivityEdit.getText().equals("")
                || txtIndividualEdit.getText().equals("")
                || txtGroupEdit.getText().equals("")
                || txtFirstnameEdit.getText().equals("")
                || txtMiddlenameEdit.getText().equals("")
                || txtLastnameEdit.getText().equals("")
                || txtBirthdayChooserEdit.getDate().equals(null)) {
            Prompt.showMessage("ERROR", "Complete the missing fields.");
        } else if (!emailValid.isValidEmailEdit) {
            Prompt.showMessage("ERROR", "Invalid Email.");
        } else {
            try {
                String genderEdit = (String) cbGenderEdit.getSelectedItem();
                String nationalityEdit = (String) cbNationalityEdit.getSelectedItem();
                String civilEdit = (String) cbCivilEdit.getSelectedItem();
                String locationEdit = (String) cbLocationEdit.getSelectedItem();
                String emailEdit = txtEmailEdit.getText();
                String scheduleEdit = (String) cbScheduleEdit.getSelectedItem();
                String attendanceEdit = (String) cbAttendanceEdit.getSelectedItem();

                String contactStrEdit = txtContactEdit.getText();
                String activityStrEdit = txtActivityEdit.getText();
                String individualStrEdit = txtIndividualEdit.getText();
                String groupStrEdit = txtGroupEdit.getText();

                String firstnameEdit = txtFirstnameEdit.getText();
                String middlenameEdit = txtMiddlenameEdit.getText();
                String lastnameEdit = txtLastnameEdit.getText();

                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                String birthdayEdit = df.format(txtBirthdayChooserEdit.getDate());

                int contactEdit = Integer.parseInt(contactStrEdit);
                int activityEdit = Integer.parseInt(activityStrEdit);
                int individualEdit = Integer.parseInt(individualStrEdit);
                int groupEdit = Integer.parseInt(groupStrEdit);

                StudentData student = new StudentData();
                student.setStudent_id(editId);
                student.setFirstname(firstnameEdit);
                student.setMiddlename(middlenameEdit);
                student.setLastname(lastnameEdit);
                student.setBirthday(birthdayEdit);
                student.setGender(genderEdit);
                student.setNationality(nationalityEdit);
                student.setCivil(civilEdit);
                student.setAddress(locationEdit);
                student.setContact(contactEdit);
                student.setEmail(emailEdit);
                student.setSchedule(scheduleEdit);
                student.setActivityScore(activityEdit);
                student.setIndividualScore(individualEdit);
                student.setGroupScore(groupEdit);
                student.setAttendanceInfo(attendanceEdit);
                StudentQuery sq = new StudentQuery();
                sq.updatestudent(student);
                loadStudent();
                searchStudent.setText("");
                UI.removeAll();
                UI.add(HomeUI);
                UI.repaint();
                UI.revalidate();
                loadStudentReport();
            } catch (Exception e) {
                Prompt.showMessage("ERROR", "Something went wrong from updating student. Contact your System Developer.");
            }
        }
    }

    private void saveStudent() {
        checkMail();
        if (cbGender.getSelectedItem().equals("Gender")
                || cbNationality.getSelectedItem().equals("Nationality")
                || cbCivil.getSelectedItem().equals("Civil Status")
                || cbLocation.getSelectedItem().equals("Address")
                || txtEmail.getText().equals("")
                || cbSchedule.getSelectedItem().equals("Schedule")
                || cbAttendance.getSelectedItem().equals("Attendance")
                || txtContact.getText().equals("")
                || txtActivity.getText().equals("")
                || txtIndividual.getText().equals("")
                || txtGroup.getText().equals("")
                || txtFirstname.getText().equals("")
                || txtMiddlename.getText().equals("")
                || txtLastname.getText().equals("")
                || txtBirthdayChooser.getDate().equals(null)) {
            Prompt.showMessage("ERROR", "Complete the missing fields.");
        } else if (!emailValid.isValidEmail) {
            Prompt.showMessage("ERROR", "Invalid Email.");
        } else {
            try {
                String gender = (String) cbGender.getSelectedItem();
                String nationality = (String) cbNationality.getSelectedItem();
                String civil = (String) cbCivil.getSelectedItem();
                String location = (String) cbLocation.getSelectedItem();
                String email = txtEmail.getText();
                String schedule = (String) cbSchedule.getSelectedItem();
                String attendance = (String) cbAttendance.getSelectedItem();

                String contactStr = txtContact.getText();
                String activityStr = txtActivity.getText();
                String individualStr = txtIndividual.getText();
                String groupStr = txtGroup.getText();

                String firstname = txtFirstname.getText();
                String middlename = txtMiddlename.getText();
                String lastname = txtLastname.getText();

                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                String birthdayChooser = df.format(txtBirthdayChooser.getDate());

                int contact = Integer.parseInt(contactStr);
                int activity = Integer.parseInt(activityStr);
                int individual = Integer.parseInt(individualStr);
                int group = Integer.parseInt(groupStr);

                StudentData student = new StudentData();
                student.setFirstname(firstname);
                student.setMiddlename(middlename);
                student.setLastname(lastname);
                student.setBirthday(birthdayChooser);
                student.setGender(gender);
                student.setNationality(nationality);
                student.setCivil(civil);
                student.setAddress(location);
                student.setContact(contact);
                student.setEmail(email);
                student.setSchedule(schedule);
                student.setActivityScore(activity);
                student.setIndividualScore(individual);
                student.setGroupScore(group);
                student.setAttendanceInfo(attendance);
                StudentQuery sq = new StudentQuery();
                sq.saveStudent(student);
                loadStudent();
                UI.removeAll();
                UI.add(HomeUI);
                UI.repaint();
                UI.revalidate();
                clearText();
                loadStudentReport();
            } catch (Exception e) {
                Prompt.showMessage("ERROR", "Something went wrong from adding student. Contact your System Developer.");
            }
        }

    }

    private void clearText() {
        txtFirstnameEdit.setText("");
        txtMiddlenameEdit.setText("");
        txtLastnameEdit.setText("");
        txtBirthdayChooserEdit.setDate(null);
        cbGenderEdit.setSelectedItem("");
        cbNationalityEdit.setSelectedItem(null);
        cbCivilEdit.setSelectedItem(null);
        cbLocationEdit.setSelectedItem(null);
        txtContactEdit.setText("");
        txtEmailEdit.setText("");
        cbScheduleEdit.setSelectedItem(null);
        txtActivityEdit.setText("");
        txtIndividualEdit.setText("");
        txtGroupEdit.setText("");
        cbAttendanceEdit.setSelectedItem("");

        txtFirstname.setText("");
        txtMiddlename.setText("");
        txtLastname.setText("");
        txtBirthdayChooser.setDate(null);;
        cbGender.setSelectedItem("");
        cbNationality.setSelectedItem("Nationality");
        cbCivil.setSelectedItem("Civil Status");
        cbLocation.setSelectedItem("Location");
        txtContact.setText("");
        txtEmail.setText("");
        cbSchedule.setSelectedItem("Schedule");
        txtActivity.setText("");
        txtIndividual.setText("");
        txtGroup.setText("");
        cbAttendance.setSelectedItem("Attendance");

        txtPasswordOld.setText("");
        txtPasswordNew.setText("");
    }

    private void loadStudentReport() {
        try {
            StudentQuery sq = new StudentQuery();
            List<StudentData> lists = sq.studentList();
            DefaultTableModel model = (DefaultTableModel) report_table.getModel();
            Object[] row = new Object[7];
            model.setRowCount(0);

            for (int i = 0; i < lists.size(); i++) {
                row[0] = lists.get(i).getStudent_id();
                row[1] = lists.get(i).getLastname() + ", " + lists.get(i).getFirstname() + " " + lists.get(i).getMiddlename();
                row[2] = lists.get(i).getSchedule();
                row[3] = lists.get(i).getActivityScore();
                row[4] = lists.get(i).getIndividualScore();
                row[5] = lists.get(i).getGroupScore();
                double d = (lists.get(i).getActivityScore() + lists.get(i).getIndividualScore() + lists.get(i).getGroupScore()) / 3;
                row[6] = String.format("%.2f", d);
                model.addRow(row);
            }
        } catch (Exception e) {
            Prompt.showMessage("ERROR", "Failed to load student data. Contact your System Developer.");
        }
    }

    private void generateReport() {
        if (cbScheduleReport.getSelectedItem().equals("Morning")) {
            String fileName = "Sample-morning.xls";
            try {
                Connection con = Database.getConnection();
                FileWriter fw = new FileWriter(DataStorage.save + fileName);
                String sql = "select * from student_table where schedule = 'Morning'";
                pst = con.prepareStatement(sql);
                rs = pst.executeQuery();
                fw.append("List of all student in Morning Schedule\n");
                while (rs.next()) {
                    fw.append("* " + rs.getString("lastname") + ", " + rs.getString("firstname") + " " + rs.getString("middlename") + "\n");
                }
                fw.flush();
                fw.close();
                Prompt.showMessage("OK", "Data has been saved in Excel format.");
            } catch (Exception e) {
                Prompt.showMessage("ERROR", "Error in generating report. Contact your System Developer.");
            }
        } else if (cbScheduleReport.getSelectedItem().equals("Afternoon")) {
            String fileName = "Sample-afternoon.xls";
            try {
                Connection con = Database.getConnection();
                FileWriter fw = new FileWriter(DataStorage.save + fileName);
                String sql = "select * from student_table where schedule = 'Afternoon'";
                pst = con.prepareStatement(sql);
                rs = pst.executeQuery();
                fw.append("List of all student in Afternoon Schedule\n");
                while (rs.next()) {
                    fw.append("* " + rs.getString("lastname") + ", " + rs.getString("firstname") + " " + rs.getString("middlename") + "\n");
                }
                fw.flush();
                fw.close();
                Prompt.showMessage("OK", "Data has been saved in Excel format.");
            } catch (Exception e) {
                Prompt.showMessage("ERROR", "Error in generating report. Contact your System Developer.");
            }
        } else {
            String fileName = "Sample-All.xls";
            try {
                Connection con = Database.getConnection();
                FileWriter fw = new FileWriter(DataStorage.save + fileName);
                String sql = "select * from student_table";
                pst = con.prepareStatement(sql);
                rs = pst.executeQuery();
                fw.append("List of all student\n");
                while (rs.next()) {
                    fw.append("* " + rs.getString("lastname") + ", " + rs.getString("firstname") + " " + rs.getString("middlename") + "\n");
                }
                fw.flush();
                fw.close();
                Prompt.showMessage("OK", "Data has been saved in Excel format.");
            } catch (Exception e) {
                Prompt.showMessage("ERROR", "Error in generating report. Contact your System Developer.");

            }
        }

    }

    private void showView() {
        try {
            Connection con = Database.getConnection();
            String sql = "select * from student_table where id = ?";
            pst = con.prepareStatement(sql);
            pst.setInt(1, editId);
            rs = pst.executeQuery();
            if (rs.next()) {
                String date = rs.getString("birthday");
                Date dateEdit = new SimpleDateFormat("yyyy-MM-dd").parse(date);

                txtFullnameView.setText(rs.getString("lastname") + ", " + rs.getString("firstname") + " " + rs.getString("middlename"));
                txtBirthdayView.setText(rs.getString("birthday"));
                txtGenderView.setText(rs.getString("gender"));
                txtNationalityView.setText(rs.getString("nationality"));
                txtCivilView.setText(rs.getString("civil"));
                txtAddressView.setText(rs.getString("address"));
                txtContactView.setText(rs.getString("contact"));
                txtEmailView.setText(rs.getString("email"));
                txtScheduleView.setText(rs.getString("schedule"));
                txtActivityView.setText(rs.getString("activityScore"));
                txtIndividualView.setText(rs.getString("individualScore"));
                txtGroupView.setText(rs.getString("groupScore"));
                txtAttendanceView.setText(rs.getString("attendance"));
            }

        } catch (Exception e) {
            Prompt.showMessage("ERROR", "Error occur in displaying student info. Contact your System Developer.");
        }
    }


    /*
    
    
    
    
    
     */
    public void loadStudent() {
        try {
            StudentQuery sq = new StudentQuery();
            List<StudentData> lists = sq.studentList();
            DefaultTableModel model = (DefaultTableModel) student_table.getModel();
            Object[] row = new Object[7];
            model.setRowCount(0);

            for (int i = 0; i < lists.size(); i++) {
                row[0] = lists.get(i).getStudent_id();
                row[1] = lists.get(i).getLastname() + ", " + lists.get(i).getFirstname() + " " + lists.get(i).getMiddlename();
                row[2] = lists.get(i).getSchedule();
                row[3] = lists.get(i).getActivityScore();
                row[4] = lists.get(i).getIndividualScore();
                row[5] = lists.get(i).getGroupScore();
                double d = (lists.get(i).getActivityScore() + lists.get(i).getIndividualScore() + lists.get(i).getGroupScore()) / 3;
                row[6] = String.format("%.2f", d);
                model.addRow(row);
            }
        } catch (Exception e) {
            Prompt.showMessage("ERROR", "Failed to load student data. Contact your System Developer.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddUI;
    private javax.swing.JPanel EditUI;
    private javax.swing.JLabel HomeLabel;
    private javax.swing.JPanel HomeUI;
    private javax.swing.JPanel PanelFrame;
    private javax.swing.JLabel ReportLabel;
    private javax.swing.JPanel ReportUI;
    private javax.swing.JLabel SettingLabel;
    private javax.swing.JPanel SettingUI;
    private javax.swing.JPanel TopPanel;
    private javax.swing.JPanel UI;
    private javax.swing.JPanel ViewUI;
    private javax.swing.JLabel addStudentLabel;
    private javax.swing.JLabel addStudentLabel1;
    private javax.swing.JComboBox<String> cbAttendance;
    private javax.swing.JComboBox<String> cbAttendanceEdit;
    private javax.swing.JComboBox<String> cbCivil;
    private javax.swing.JComboBox<String> cbCivilEdit;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JComboBox<String> cbGenderEdit;
    private javax.swing.JComboBox<String> cbLocation;
    private javax.swing.JComboBox<String> cbLocationEdit;
    private javax.swing.JComboBox<String> cbNationality;
    private javax.swing.JComboBox<String> cbNationalityEdit;
    private javax.swing.JComboBox<String> cbSchedule;
    private javax.swing.JComboBox<String> cbScheduleEdit;
    private javax.swing.JComboBox<String> cbScheduleReport;
    private javax.swing.JPanel contentPane;
    private javax.swing.JMenuItem edit;
    private javax.swing.JLabel exitButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu pop;
    private javax.swing.JLabel printReport;
    private javax.swing.JMenuItem refresh;
    private javax.swing.JTable report_table;
    private javax.swing.JTextField searchStudent;
    private javax.swing.JTable student_table;
    private javax.swing.JTextField txtActivity;
    private javax.swing.JTextField txtActivityEdit;
    private javax.swing.JLabel txtActivityView;
    private javax.swing.JLabel txtAddressView;
    private javax.swing.JLabel txtAttendanceView;
    private com.toedter.calendar.JDateChooser txtBirthdayChooser;
    private com.toedter.calendar.JDateChooser txtBirthdayChooserEdit;
    private javax.swing.JLabel txtBirthdayView;
    private javax.swing.JLabel txtCivilView;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtContactEdit;
    private javax.swing.JLabel txtContactView;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmailEdit;
    private javax.swing.JLabel txtEmailView;
    private javax.swing.JTextField txtFirstname;
    private javax.swing.JTextField txtFirstnameEdit;
    private javax.swing.JLabel txtFullnameView;
    private javax.swing.JLabel txtGenderView;
    private javax.swing.JTextField txtGroup;
    private javax.swing.JTextField txtGroupEdit;
    private javax.swing.JLabel txtGroupView;
    private javax.swing.JTextField txtIndividual;
    private javax.swing.JTextField txtIndividualEdit;
    private javax.swing.JLabel txtIndividualView;
    private javax.swing.JTextField txtLastname;
    private javax.swing.JTextField txtLastnameEdit;
    private javax.swing.JTextField txtMiddlename;
    private javax.swing.JTextField txtMiddlenameEdit;
    private javax.swing.JLabel txtNationalityView;
    private javax.swing.JPasswordField txtPasswordNew;
    private javax.swing.JPasswordField txtPasswordOld;
    private javax.swing.JLabel txtScheduleView;
    private javax.swing.JMenuItem view;
    // End of variables declaration//GEN-END:variables

}
